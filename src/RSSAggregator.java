import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * author: Omar Takruri
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String titleElement = "N/A";

        int indexOfTitle = getChildElement(channel, "title");
        if (indexOfTitle != -1) {
            titleElement = channel.child(getChildElement(channel, "title"))
                    .child(0).label();

        }

        String descriptionElement = "N/A";

        int indexOfDescription = getChildElement(channel, "description");
        if (indexOfDescription != -1) {
            descriptionElement = channel
                    .child(getChildElement(channel, "description")).child(0)
                    .label();
        } else if (indexOfDescription == -1) {
            descriptionElement = "N/A";
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + titleElement + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\""
                + channel.child(getChildElement(channel, "link")).child(0)
                        .label()
                + "\">" + channel.child(getChildElement(channel, "title"))
                        .child(0).label()
                + "</a></h1>");
        out.println("<p>" + descriptionElement + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        for (int i = 0; i < xml.numberOfChildren(); i++) {

            if (xml.child(i).label().equals(tag)
                    && xml.child(i).numberOfChildren() > 0) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * The following will fill in the table in each of the HTML pages,
         * prints out error messages when not finding a specific element, and
         * extracts values using other methods.
         */

        out.println("<tr>");

        /*
         * [PUBLISH DATE] - If "pubDate" was found and it had a child, it will
         * print that date. Otherwise, the error message will show.
         */

        int pubDateIndex = getChildElement(item, "pubDate");
        String pubDate = item.child(pubDateIndex).child(0).label();
        if (pubDateIndex != -1) {
            if (item.child(pubDateIndex).numberOfChildren() == 1) {
                out.println("<td>" + pubDate + "</td>");
            } else {
                out.println("<td>No source available</td>");
            }

        } else {
            out.println("<td>No source available</td>");
        }

        /*
         * [SOURCE] - If "source" child was found, print its label and attach
         * the "url" attribute value to it as a link to the source.
         */

        int sourceIndex = getChildElement(item, "source");

        /*
         * Error fix - You cannot set "item.child(sourceIndex).child(0).label(),
         * To a variable String and plug it in. No clue why...
         */

        if (sourceIndex != -1) {
            if (item.child(sourceIndex).numberOfChildren() == 1) {
                if (item.child(sourceIndex).hasAttribute("url")) {
                    out.println("<td><a href=\""
                            + item.child(sourceIndex).attributeValue("url")
                            + "\">" + item.child(sourceIndex).child(0).label()
                            + "</a></td>");
                } else {

                    out.println(item.child(sourceIndex).child(0).label());
                }
            }

        } else {
            out.println("<td>No source available</td>");
        }

        String url = ""; //this will hold the "link" node "url" value, if present.
        boolean hasLink = false; // Holds the check for "link" node presence.

        int linkNode = getChildElement(item, "link"); //checks if link is there.

        if (linkNode != -1) {
            url = item.child(linkNode).child(0).label();
            hasLink = true;
        }

        /*
         * The following is a check for if at least one of "title" or
         * "description" nodes are present. If so, continue further checking and
         * displayment of information held by these nodes.
         */

        int descriptionIndex = getChildElement(item, "description");
        int titleIndex = getChildElement(item, "title");

        if (titleIndex != -1) {
            if (hasLink) {
                out.println("<td><a href=\"" + url + "\">"
                        + item.child(titleIndex).child(0).label()
                        + "</a></td>");
            } else {
                out.println("<td>" + item.child(titleIndex).child(0).label()
                        + "</td>");
            }
        } else {
            if (hasLink) {
                out.println("<td><a href=\"" + url + "\">"
                        + item.child(descriptionIndex).child(0).label()
                        + "</a></td>");
            } else {
                out.println(
                        "<td>" + item.child(descriptionIndex).child(0).label()
                                + "</td>");
            }
        }

        //End of all element checking.
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url); //Establishing an XMLTree

        // Checking the extracted RSS file:
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").contentEquals("2.0")) {

            int channelIndex = getChildElement(xml, "channel");

            //Creating new page header:
            outputHeader(xml.child(channelIndex), out);

            for (int i = 0; i < xml.child(channelIndex)
                    .numberOfChildren(); i++) {
                if (xml.child(channelIndex).child(i).label().equals("item")) {
                    processItem(xml.child(channelIndex).child(i), out);
                }
            }
            outputFooter(out);
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL for your XML feed: ");
        String xmlFeed = in.nextLine(); // = XML URL

        out.print("Enter the HTML file name (including .html extension): ");
        String fileName = in.nextLine(); // = The output destination (HTML file)

        SimpleWriter outFile = new SimpleWriter1L(fileName);
        XMLTree xml = new XMLTree1(xmlFeed); //Creates a tree with the givens

        /*
         * The following iterates through each RSS feed and creates a page with
         * properties accordingly...
         */

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals("feed")) {

                String fileAttribute = xml.child(i).attributeValue("file");
                String urlAttribute = xml.child(i).attributeValue("url");

                SimpleWriter outFile2 = new SimpleWriter1L(fileAttribute);
                processFeed(urlAttribute, fileAttribute, outFile2);

                outFile2.close();
            }
        }

        //The following generates the main page ("Top Stories"):

        outFile.println("<html>");
        outFile.println("<head>");
        outFile.println("<title>" + xml.attributeValue("title") + "</title>");
        outFile.println("<h2>" + xml.attributeValue("title") + "</h2>");
        outFile.println("<ul style =\"list-style-type:disc\">");

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            String name = xml.child(i).attributeValue("name");
            String linkToHtmlFile = xml.child(i).attributeValue("file");

            outFile.println("<li><a href=\"" + linkToHtmlFile + "\">" + name
                    + "</a></li>");
        }
        outFile.println("</ul>");
        outputFooter(outFile);

        in.close();
        out.close();
        outFile.close();

    }

}
